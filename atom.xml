<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>聊是无聊的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-07T09:05:13.400Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>聊是无聊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React 简单整理</title>
    <link href="http://yoursite.com/2018/08/23/article-title/"/>
    <id>http://yoursite.com/2018/08/23/article-title/</id>
    <published>2018-08-23T07:15:30.000Z</published>
    <updated>2018-09-07T09:05:13.400Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-React的生命周期"><a href="#1-React的生命周期" class="headerlink" title="1. React的生命周期"></a>1. React的生命周期</h3><h3 id="组件生命周期的三种状态展示："><a href="#组件生命周期的三种状态展示：" class="headerlink" title="组件生命周期的三种状态展示："></a>组件生命周期的三种状态展示：</h3><ul><li>Mounting: 已插入了真是dom结构 </li><li>Updating: 正在被重新渲染 </li><li>Unmounting: 已移出了真实dom结构</li></ul><h3 id="2-关于-生命周期的处理函数（will表示进入状态之前调用，did表示进入状态之后调用）："><a href="#2-关于-生命周期的处理函数（will表示进入状态之前调用，did表示进入状态之后调用）：" class="headerlink" title="2.关于 生命周期的处理函数（will表示进入状态之前调用，did表示进入状态之后调用）："></a>2.关于 生命周期的处理函数（will表示进入状态之前调用，did表示进入状态之后调用）：</h3><ul><li><strong>componentWillMount()</strong> :<br>组件将要渲染到真实dom节点；执行一次，在初始化render之前执行，如果在这个方法内调用setState，render()知道state发生变化，并且只执行一次</li><li><strong>componentDidMount()</strong><br>//组件已经渲染到真实dom节点；在初始化render之后只执行一次，在这个方法内，可以访问任何组件，componentDidMount()方法中的子组件在父组件之前执行；<br>从这个函数开始，就可以和 js 其他框架交互了，例如设置计时 setTimeout 或者 setInterval，或者发起网络请求</li><li><strong>componentWillUpdate()</strong>//当props和state发生变化，组件将要被重新渲染；并且在render方法之前执行，当然初始化render时不执行该方法，需要特别注意的是，在这个函数里面，你就不能使用this.setState来修改状态。这个函数调用之后，就会把nextProps和nextState分别设置到this.props和this.state中。紧接着这个函数，就会调用render()来更新界面了</li><li><strong>componentDidUpdate()</strong>//组件已经完成重新渲染；在初始化render时不执行</li><li><strong>componentWillUnmout()</strong>//卸载组件，比如跳转路由的时候</li><li><strong>componentWillReceiveProps()</strong> //已经加载组件props发生改变的时候调用；在这个回调函数里面，你可以根据属性的变化，通过调用this.setState()来更新你的组件状态，旧的属性还是可以通过this.props来获取,这里调用更新状态是安全的，并不会触发额外的render调用</li><li><strong>shouldComponentUpdate()</strong>//组件判断是否要重新渲染的时候调用；在初始化render时不会执行，当props或者state发生变化时执行，并且是在render之前，当新的props或者state不需要更新组件时，返回false<h4 id="3-关于组件生命周期的执行顺序-如下图所示："><a href="#3-关于组件生命周期的执行顺序-如下图所示：" class="headerlink" title="3. 关于组件生命周期的执行顺序 如下图所示："></a>3. 关于组件生命周期的执行顺序 如下图所示：</h4><img src="https://note.youdao.com/yws/public/resource/ab2cc4cb6abd27779a98343b11256d86/xmlnote/D3F2B8C7A6A04D8F99722AF34EEA9F36/851A0C31E6A749EB948EE8F6B5C6E006/88" alt="image"><h3 id="3-react中遇到的坑和一些小的知识点"><a href="#3-react中遇到的坑和一些小的知识点" class="headerlink" title="3.react中遇到的坑和一些小的知识点:"></a>3.react中遇到的坑和一些小的知识点:</h3><h4 id="setState-是异步的"><a href="#setState-是异步的" class="headerlink" title="- setState()是异步的:"></a>- setState()是异步的:</h4>this.setState()会调用render方法，但并不会立即改变state的值，state是在render方法中赋值的。<br>所以执行this.setState()后立即获取state的值是不变的。<br>同样的直接赋值state并不会出发更新，因为没有调用render函数。<h4 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="- 组件的生命周期"></a>- 组件的生命周期</h4>componentWillMount，componentDidMount 只有在初始化的时候才调用。<br>componentWillReceivePorps，shouldComponentUpdate，componentWillUpdata，componentDidUpdate 只有组件在更新的时候才被调用，初始化时不调用。<h4 id="reducer必须返回一个新的对象才能出发组件的更新"><a href="#reducer必须返回一个新的对象才能出发组件的更新" class="headerlink" title="- reducer必须返回一个新的对象才能出发组件的更新"></a>- reducer必须返回一个新的对象才能出发组件的更新</h4>因为在connect函数中会对新旧两个state进行浅对比，如果state只是值改变但是引用地址没有改变，connect会认为它们相同而不触发更新。<h4 id="无论reducer返回的state是否改变，subscribe中注册的所有回调函数都会被触发。"><a href="#无论reducer返回的state是否改变，subscribe中注册的所有回调函数都会被触发。" class="headerlink" title="- 无论reducer返回的state是否改变，subscribe中注册的所有回调函数都会被触发。"></a>- 无论reducer返回的state是否改变，subscribe中注册的所有回调函数都会被触发。</h4><h4 id="组件命名的首字母必须是大写，这是类命名的规范。"><a href="#组件命名的首字母必须是大写，这是类命名的规范。" class="headerlink" title="- 组件命名的首字母必须是大写，这是类命名的规范。"></a>- 组件命名的首字母必须是大写，这是类命名的规范。</h4><h4 id="组件卸载之前，加在dom元素上的监听事件，和定时器需要手动清除，因为这些并不在react的控制范围内，必须手动清除。"><a href="#组件卸载之前，加在dom元素上的监听事件，和定时器需要手动清除，因为这些并不在react的控制范围内，必须手动清除。" class="headerlink" title="- 组件卸载之前，加在dom元素上的监听事件，和定时器需要手动清除，因为这些并不在react的控制范围内，必须手动清除。"></a>- 组件卸载之前，加在dom元素上的监听事件，和定时器需要手动清除，因为这些并不在react的控制范围内，必须手动清除。</h4><h4 id="按需加载时如果组件是通过export-default-暴露出去，那么require-ensure时必须加上default。"><a href="#按需加载时如果组件是通过export-default-暴露出去，那么require-ensure时必须加上default。" class="headerlink" title="- 按需加载时如果组件是通过export default 暴露出去，那么require.ensure时必须加上default。"></a>- 按需加载时如果组件是通过export default 暴露出去，那么require.ensure时必须加上default。</h4></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">require.ensure([], require =&gt; &#123;</span><br><span class="line">    cb(null, require(&apos;../Component/saleRecord&apos;).default)</span><br><span class="line">&#125;,&apos;saleRecord&apos;)</span><br></pre></td></tr></table></figure><h4 id="react的路由有hashHistory和browserHistory，hashHistory由hash-控制跳转，一般用于正式线上部署，browserHistory就是普通的地址跳转，一般用于开发阶段。"><a href="#react的路由有hashHistory和browserHistory，hashHistory由hash-控制跳转，一般用于正式线上部署，browserHistory就是普通的地址跳转，一般用于开发阶段。" class="headerlink" title="- react的路由有hashHistory和browserHistory，hashHistory由hash#控制跳转，一般用于正式线上部署，browserHistory就是普通的地址跳转，一般用于开发阶段。"></a>- react的路由有hashHistory和browserHistory，hashHistory由hash#控制跳转，一般用于正式线上部署，browserHistory就是普通的地址跳转，一般用于开发阶段。</h4><h4 id="标签里用到的，for-要写成htmlFor，因为for已经成了关键字。"><a href="#标签里用到的，for-要写成htmlFor，因为for已经成了关键字。" class="headerlink" title="- 标签里用到的，for 要写成htmlFor，因为for已经成了关键字。"></a>- 标签里用到的，for 要写成htmlFor，因为for已经成了关键字。</h4><h4 id="componentWillUpdate中可以直接改变state的值，而不能用setState。"><a href="#componentWillUpdate中可以直接改变state的值，而不能用setState。" class="headerlink" title="- componentWillUpdate中可以直接改变state的值，而不能用setState。"></a>- componentWillUpdate中可以直接改变state的值，而不能用setState。</h4><h4 id="如果使用es6class类继承react的component组件，constructor中必须调用super，因为子类必须用super继承component的this，否则实例化的时候会报错。"><a href="#如果使用es6class类继承react的component组件，constructor中必须调用super，因为子类必须用super继承component的this，否则实例化的时候会报错。" class="headerlink" title="- 如果使用es6class类继承react的component组件，constructor中必须调用super，因为子类必须用super继承component的this，否则实例化的时候会报错。"></a>- 如果使用es6class类继承react的component组件，constructor中必须调用super，因为子类必须用super继承component的this，否则实例化的时候会报错。</h4><h4 id="组件卸载之前，加在dom元素上的监听事件，和定时器需要手动清除，因为这些并不在react的控制范围内，必须手动清除。指的是在this-refs-xxx这种真实dom上addEventListener这样添加的监听事件，在组件卸载的时候要手动清除-removeEventListener-，react组件上的onClick这种不用管，react帮我们处理好了"><a href="#组件卸载之前，加在dom元素上的监听事件，和定时器需要手动清除，因为这些并不在react的控制范围内，必须手动清除。指的是在this-refs-xxx这种真实dom上addEventListener这样添加的监听事件，在组件卸载的时候要手动清除-removeEventListener-，react组件上的onClick这种不用管，react帮我们处理好了" class="headerlink" title="- 组件卸载之前，加在dom元素上的监听事件，和定时器需要手动清除，因为这些并不在react的控制范围内，必须手动清除。指的是在this.refs.xxx这种真实dom上addEventListener这样添加的监听事件，在组件卸载的时候要手动清除(removeEventListener)，react组件上的onClick这种不用管，react帮我们处理好了"></a>- 组件卸载之前，加在dom元素上的监听事件，和定时器需要手动清除，因为这些并不在react的控制范围内，必须手动清除。指的是在this.refs.xxx这种真实dom上addEventListener这样添加的监听事件，在组件卸载的时候要手动清除(removeEventListener)，react组件上的onClick这种不用管，react帮我们处理好了</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-React的生命周期&quot;&gt;&lt;a href=&quot;#1-React的生命周期&quot; class=&quot;headerlink&quot; title=&quot;1. React的生命周期&quot;&gt;&lt;/a&gt;1. React的生命周期&lt;/h3&gt;&lt;h3 id=&quot;组件生命周期的三种状态展示：&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
</feed>
